//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id String @id() @db.Uuid() @unique() @default(uuid())
    createdAt DateTime @map(name: "created_at") @default(now())
    updatedAt DateTime @map(name: "updated_at") @updatedAt()
    /// @length(max: 50, message: '50 characters max')
    firstName String @map(name: "first_name")
    /// @length(max: 50, message: '50 characters max')
    lastName String @map(name: "last_name")
    /// @length(min: 5, message: '5 characters min')
    email String
    password String
    isEmailVerified Boolean @map(name: "is_email_verified") @default(false)
    isSuperuser Boolean @map(name: "is_superuser") @default(false)
    isStaff Boolean @map(name: "is_staff") @default(false)
    termsAgreement Boolean @map(name: "terms_agreement") @default(false)
    avatarId String @db.Uuid() @map(name: "avatar_id")
    avatar File @relation(fields: [avatarId], references: [id])
    access String
    refresh String
    reviews Review[]
    user Otp?
    listings Listing[]
    bids Bid[]
    watchlists Watchlist[]

    @@map("users")
    @@unique([email])
}

model GuestUser {
    id String @id() @db.Uuid() @unique() @default(uuid())
    createdAt DateTime @map(name: "created_at") @default(now())
    updatedAt DateTime @map(name: "updated_at") @updatedAt()
    watchlists Watchlist[]

    @@map("guest_users")
}

model Otp {
    id String @id() @db.Uuid() @unique() @default(uuid())
    createdAt DateTime @map(name: "created_at") @default(now())
    updatedAt DateTime @map(name: "updated_at") @updatedAt()
    userId String @db.Uuid() @unique() @map(name: "user_id")
    user User @relation(fields: [userId], references: [id])
    code Int

    @@map("otps")
}

model File {
    id String @id() @db.Uuid() @unique() @default(uuid())
    createdAt DateTime @map(name: "created_at") @default(now())
    updatedAt DateTime @map(name: "updated_at") @updatedAt()
    resourceType String @map(name: "resource_type")
    users User[]
    lisings Listing[]

    @@map("files")
}

model Category {
    id String @id() @db.Uuid() @unique() @default(uuid())
    createdAt DateTime @map(name: "created_at") @default(now())
    updatedAt DateTime @map(name: "updated_at") @updatedAt()
    /// @length(max: 30, message: '30 characters max')
    name String @unique()
    slug String @unique()
    listings Listing[]

    @@map("categories")
}

model Listing {
    id String @id() @db.Uuid() @unique() @default(uuid())
    createdAt DateTime @map(name: "created_at") @default(now())
    updatedAt DateTime @map(name: "updated_at") @updatedAt()
    auctioneerId String @db.Uuid() @map(name: "auctioneer_id")
    auctioneer User @relation(fields: [auctioneerId], references: [id])
    /// @length(max: 70, message: '70 characters max')
    name String
    slug String @unique()
    desc String
    categoryId String @db.Uuid() @map(name: "category_id")
    category Category @relation(fields: [categoryId], references: [id])
    price Decimal @db.Decimal(10, 2)
    highestBid Decimal @map(name: "highest_bid") @db.Decimal(10, 2) @default(0.00)
    bidsCount Int @map(name: "bids_count") @default(0)
    closingDate DateTime @map(name: "closing_date")
    active Boolean @default(true)
    imageId String @db.Uuid() @map(name: "image_id")
    image File @relation(fields: [imageId], references: [id])
    watchlists Watchlist[]
    bids Bid[]

    @@map("listings")
}

model Bid {
    id String @id() @db.Uuid() @unique() @default(uuid())
    createdAt DateTime @map(name: "created_at") @default(now())
    updatedAt DateTime @map(name: "updated_at") @updatedAt()
    userId String @db.Uuid() @map(name: "user_id")
    user User @relation(fields: [userId], references: [id])
    listingId String @db.Uuid() @map(name: "listing_id")
    listing Listing @relation(fields: [listingId], references: [id])
    amount Decimal @db.Decimal(10, 2)

    @@map("bids")
    @@unique([listingId, amount], name: "unique_listing_amount_bids")
    @@unique([userId, listingId], name: "unique_user_listing_bids")
}

model Watchlist {
    id String @id() @db.Uuid() @unique() @default(uuid())
    createdAt DateTime @map(name: "created_at") @default(now())
    updatedAt DateTime @map(name: "updated_at") @updatedAt()
    userId String @db.Uuid() @map(name: "user_id")
    user User @relation(fields: [userId], references: [id])
    listingId String @db.Uuid() @map(name: "listing_id")
    listing Listing @relation(fields: [listingId], references: [id])
    sessionKey String @db.Uuid() @map(name: "session_key")
    guest GuestUser @relation(fields: [sessionKey], references: [id])

    @@map("watchlists")
    @@unique([userId, listingId], name: "unique_user_listing_watchlists")
    @@unique([sessionKey, listingId], name: "unique_session_key_listing_watchlists")
}

model SiteDetail {
    id String @id() @db.Uuid() @unique() @default(uuid())
    createdAt DateTime @map(name: "created_at") @default(now())
    updatedAt DateTime @map(name: "updated_at") @updatedAt()
    name String @default("Kay's Auction House")
    email String @default("kayprogrammer1@gmail.com")
    phone String @default("+2348133831036")
    address String @default("234, Lagos, Nigeria")
    fb String @default("https://facebook.com")
    tw String @default("https://twitter.com")
    wh String @default("https://wa.me/2348133831036")
    ig String @default("https://instagram.com")

    @@map("site_details")
}

model Subscriber {
    id String @id() @db.Uuid() @unique() @default(uuid())
    createdAt DateTime @map(name: "created_at") @default(now())
    updatedAt DateTime @map(name: "updated_at") @updatedAt()
    email String
    exported Boolean @default(false)

    @@map("subscribers")
}

model Review {
    id String @id() @db.Uuid() @unique() @default(uuid())
    createdAt DateTime @map(name: "created_at") @default(now())
    updatedAt DateTime @map(name: "updated_at") @updatedAt()
    reviewerId String @db.Uuid() @map(name: "reviewer_id")
    reviewer User @relation(fields: [reviewerId], references: [id])
    show Boolean @default(false)
    /// @length(max: 200, message: '200 characters max')
    text String

    @@map("reviews")
}